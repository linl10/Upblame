#include"stdio.h"
#include"stdlib.h"
#define n 10 		/*假定系统允许的最大作业为n，假定模拟实验中n值为10*/
#define m 10		 /*假定系统允许的空闲区表最大为m，假定模拟实验中m值为10*/
#define minisize 100     //  ????
struct{
		float address; 	/*已分分区起始地址*/
		float length;	 /*已分分区长度，单位为字节*/
		int flag; 		/*已分配区表登记栏标志，用"0"表示空栏目*/
}used_table[n]; 	/*已分配区表*/

struct{
		float address; 	/*空闲区起始地址*/
		float length;		 /*空闲区长度，单位为字节*/
		int flag; 		/*空闲区表登记栏标志，用"0"表示空栏目，用"1"表示未分配*/
}free_table[m]; 	/*空闲区表*/

void main( )
{
	int i,a;
	void allocate(char str,float leg);	//分配主存空间函数
	void reclaim(char str);			//回收主存函数
	float xk;
	char J;							/*空闲分区表初始化：*/
	free_table[0].address=10240;
	free_table[0].length=102400;
	free_table[0].flag=1;      //flag  ： 设置标记
	for(i=1;i<m;i++)
		free_table[i].flag=0;				/*已分配表初始化：*/
    for(i=0;i<n;i++)
		used_table[i].flag=0; 
	while(1)
	{
		printf("\n选择功能项（0-退出,1-分配主存,2-回收主存,3-显示主存）\n");
		printf("选择功项(0~3) :");
		scanf("%d",&a);
		switch(a)
		{
			case 0: exit(0); 			/*a=0程序结束*/
			case 1:			 	/*a=1分配主存空间*/
				printf("输入作业名J和作业所需长度xk: ");
   /************************blank************************/   
                scanf("%s",&J);	  scanf("%f",&xk);                       
                allocate(J,xk);  
				break;/*分配主存空间*/
                           	
			case 2: 				/*a=2回收主存空间*/
				printf("输入要回收分区的作业名");
				scanf("%s",&J);
                reclaim(J);  
				break;
                           		/*回收主存空间*/
                           	
			case 3: 		/*a=3显示主存情况*//*输出空闲区表和已分配表的内容*/
				printf("输出空闲区表：\n起始地址 分区长度 标志\n");
				for(i=0;i<m;i++)
					printf("%6.0f%9.0f%6d\n",free_table[i].address,free_table[i].length, free_table[i].flag);
				printf(" 按任意键,输出已分配区表\n");
				getchar();
				printf(" 输出已分配区表：\n起始地址 分区长度 标志\n");
				for(i=0;i<n;i++)
					if(used_table[i].flag!=0)
						printf("%6.0f%9.0f%6c\n",used_table[i].address,used_table[i].length, used_table[i].flag);
					else
						printf("%6.0f%9.0f%6d\n",used_table[i].address,used_table[i].length, used_table[i].flag);
  /************************blank************************/   
                 break;                        
			default:printf("没有该选项\n");
		}/*case*/
	}/*while*/
}		/*主函数结束*/ 

int uflag;		//分配表标志
int fflag;		//空闲表标志
float uend_address;
float fend_address;

void allocate(char str,float leg)
{
	float ressize;		//剩块
	int k;
	int i;
	uflag=0;
	fflag=0;
	for(i=0;i<m;i++)
	{
		if(free_table[i].flag==1 && free_table[i].length>=leg)
		{
			fflag=1;break;
		}   
	}
	if(fflag==0)
		printf("没有满足条件的空闲区\n");
	else
	{
		ressize=free_table[i].length-leg;
		for(k=0;k<n;k++)
		{
			if(used_table[k].flag==0)
			{
				if(ressize<minisize)		//剩余块过小
				{
					used_table[k].length=free_table[i].length;
					used_table[k].address=free_table[i].address;
					used_table[k].flag=str;
					free_table[i].length=0;
					free_table[i].flag=0;
					break;
				}
				else
				{
					used_table[k].address=free_table[i].address+ressize;
					used_table[k].flag=str;
					used_table[k].length=leg;
					free_table[i].length=ressize;
					break;
				}
			}
		}//for结束
	}
}	

void reclaim(char str)
{
	int k,i;
	uflag=0;fflag=0;
	
	for(k=0;k<n;k++)
	{
		if(used_table[k].flag==str)
		{
			uflag=1;break;
		}
	}
	if(uflag==0)
		printf("\n找不到该作业!\n");
	else
	{
		for(i=0;i<m;i++)
		{
			uend_address=used_table[k].address+used_table[k].length;
			fend_address=free_table[i].address+free_table[i].length;
			if(used_table[k].address==fend_address)//上邻
			{
				fflag=1;
				free_table[i].length=free_table[i].length+used_table[k].length;
				free_table[i].flag=1;
				used_table[k].flag=0;
				used_table[k].length=0;
				used_table[k].address=0;
				printf("\n已回收!\n");
				break;
			}
			else
			{
				if(free_table[i].address==uend_address)//下邻
				{
					fflag=1;
					free_table[i].address=used_table[k].address;
					free_table[i].length=free_table[i].length+used_table[k].length;
					free_table[i].flag=1;
					used_table[k].flag=0;
					used_table[k].length=0;
					used_table[k].address=0;
					printf("\n已回收!\n");
					break;
				}
			}
		}//for结束
	if(fflag==0)
	{
		i=0;
		for(i=0;i<m;i++)
		{
			if(free_table[i].flag==0)
			{
				free_table[i].address=used_table[k].address;
				free_table[i].length=used_table[k].length;
				free_table[i].flag=1;
				used_table[k].length=0;
				used_table[k].flag=0;
				used_table[k].address=0;
				break;
			}
		}
		printf("\n已回收!\n");
	}
}
}
